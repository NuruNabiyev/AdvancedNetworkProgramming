!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/b6841a1/
;;	../../.config/nvim/init.vim	/^imap ;; <Esc>A;<CR>$/;"	m
<C-j>	../../.config/nvim/init.vim	/^imap <C-j> <Plug>(coc-snippets-expand-jump)$/;"	m
<C-j>	../../.config/nvim/init.vim	/^vmap <C-j> <Plug>(coc-snippets-select)$/;"	m
<C-l>	../../.config/nvim/init.vim	/^imap <C-l> <Plug>(coc-snippets-expand)$/;"	m
<C-p>	../../.config/nvim/init.vim	/^nnoremap <silent> <C-p> :FZF<CR>$/;"	m
<C-p>a	../../.config/nvim/init.vim	/^    nnoremap <C-p>a :Rg$/;"	m
<C-y>a	../../.config/nvim/init.vim	/^    nnoremap <C-y>a :Rg$/;"	m
<F2>	../../.config/nvim/init.vim	/^imap <F2> <C-R>=strftime('%c')<C-M>$/;"	m
<F3>	../../.config/nvim/init.vim	/^imap <F3> <C-R>=ShowFuncName()<C-M>$/;"	m
<F3>	../../.config/nvim/init.vim	/^imap <F3> <C-R>=getline(search("^[^ \\t#\/]\\\\{2}.*[^:]\\s*$", 'bWn'))<C-M>$/;"	m
<F5>	../../.config/nvim/init.vim	/^map <F5> <Esc>:Gwrite<CR>:!clear;python %<CR>$/;"	m
<Leader><Enter>	../../.config/nvim/init.vim	/^nnoremap <silent> <Leader><Enter> :Buffers<CR>$/;"	m
<Leader>R	../../.config/nvim/init.vim	/^nnoremap <Leader>R$/;"	m
<Leader>R	../../.config/nvim/init.vim	/^xmap <Leader>R$/;"	m
<Leader>cc	../../.config/nvim/init.vim	/^nnoremap <Leader>cc :Gwrite<CR> :Cargo clippy --all-targets<CR>$/;"	m
<Leader>cr	../../.config/nvim/init.vim	/^nnoremap <Leader>cr :Gwrite<CR> :Cargo run<CR>$/;"	m
<Leader>ct	../../.config/nvim/init.vim	/^nnoremap <Leader>ct :Gwrite<CR> :Cargo test<CR>$/;"	m
<Leader>cti	../../.config/nvim/init.vim	/^nnoremap <Leader>cti :Gwrite<CR> :Cargo test -- --ignored<CR>$/;"	m
<Leader>f	../../.config/nvim/init.vim	/^nnoremap <silent> <Leader>f :Files<CR>$/;"	m
<Leader>l	../../.config/nvim/init.vim	/^nnoremap <silent> <Leader>l :Lines<CR>$/;"	m
<Leader>r	../../.config/nvim/init.vim	/^nnoremap <Leader>r :%s\/\/gc<Left><Left><Left>$/;"	m
<Leader>w	../../.config/nvim/init.vim	/^nnoremap <Leader>w :Gwrite<CR>$/;"	m
<S-TAB>	../../.config/nvim/init.vim	/^xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)$/;"	m
<TAB>	../../.config/nvim/init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<TAB>	../../.config/nvim/init.vim	/^nmap <silent> <TAB> <Plug>(coc-range-select)$/;"	m
<TAB>	../../.config/nvim/init.vim	/^xmap <silent> <TAB> <Plug>(coc-range-select)$/;"	m
<c-space>	../../.config/nvim/init.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	../../.config/nvim/init.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>	../../.config/nvim/init.vim	/^map <leader> f :call ShowFuncName() <CR>$/;"	m
<leader><leader>	../../.config/nvim/init.vim	/^nnoremap <leader><leader> <c-^>$/;"	m
<leader>?	../../.config/nvim/init.vim	/^nnoremap <leader>? :Helptags<CR>$/;"	m
<leader>Enter	../../.config/nvim/init.vim	/^nnoremap <leader>Enter :Buffers<CR>$/;"	m
<leader>M	../../.config/nvim/init.vim	/^nnoremap <leader>M :Marks<CR>$/;"	m
<leader>R	../../.config/nvim/init.vim	/^    nnoremap <leader>R :!make run<cr>$/;"	m
<leader>R	../../.config/nvim/init.vim	/^    nnoremap <leader>R :!node %<cr>$/;"	m
<leader>R	../../.config/nvim/init.vim	/^    nnoremap <leader>R :!python3 %<cr>$/;"	m
<leader>T	../../.config/nvim/init.vim	/^nnoremap <leader>T :Tags<CR>$/;"	m
<leader>V	../../.config/nvim/init.vim	/^nnoremap <leader>V :tabnew  $MYVIMRC<CR>$/;"	m
<leader>W	../../.config/nvim/init.vim	/^nnoremap <leader>W :BLines<CR>$/;"	m
<leader>a	../../.config/nvim/init.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	../../.config/nvim/init.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	../../.config/nvim/init.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>f	../../.config/nvim/init.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	../../.config/nvim/init.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>ff	../../.config/nvim/init.vim	/^imap <leader>ff <C-R>=getline(search("^[^ \\t#\/]\\\\{2}.*[^:]\\s*$", 'bWn'))<C-M>$/;"	m
<leader>qf	../../.config/nvim/init.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	../../.config/nvim/init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>sc	../../.config/nvim/init.vim	/^nnoremap <leader>sc :CloseSession<CR>$/;"	m
<leader>sd	../../.config/nvim/init.vim	/^nnoremap <leader>sd :DeleteSession<CR>$/;"	m
<leader>so	../../.config/nvim/init.vim	/^nnoremap <leader>so :OpenSession $/;"	m
<leader>ss	../../.config/nvim/init.vim	/^nnoremap <leader>ss :SaveSession $/;"	m
<leader>v	../../.config/nvim/init.vim	/^nnoremap <leader>v :e  $MYVIMRC<CR>$/;"	m
<leader>x	../../.config/nvim/init.vim	/^xmap <leader>x  <Plug>(coc-convert-snippet)$/;"	m
<space>a	../../.config/nvim/init.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	../../.config/nvim/init.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	../../.config/nvim/init.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	../../.config/nvim/init.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	../../.config/nvim/init.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	../../.config/nvim/init.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	../../.config/nvim/init.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	../../.config/nvim/init.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
Constexpr	src/utilities.c	/^    enum Constexpr { MAX_SIZE = 1024 };$/;"	g	function:print_trace	file:
Constexpr	src/utilities.c	/^  enum Constexpr { MAX_SIZE = 1024 };$/;"	g	function:print_trace	file:
Exec	../../.config/nvim/init.vim	/^funct! Exec(command)$/;"	f
Fold	../../.config/nvim/init.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	../../.config/nvim/init.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
K	../../.config/nvim/init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
LangRunner	../../.config/nvim/init.vim	/^function! LangRunner()$/;"	f
MAX_SIZE	src/utilities.c	/^    enum Constexpr { MAX_SIZE = 1024 };$/;"	e	enum:print_trace::Constexpr	file:
MAX_SIZE	src/utilities.c	/^  enum Constexpr { MAX_SIZE = 1024 };$/;"	e	enum:print_trace::Constexpr	file:
OR	../../.config/nvim/init.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
Rg	../../.config/nvim/init.vim	/^    command! -bang -nargs=* Rg$/;"	c
ShowFuncName	../../.config/nvim/init.vim	/^fun! ShowFuncName()$/;"	f
[c	../../.config/nvim/init.vim	/^nmap <silent> [c <Plug>(coc-diagnostic-prev)$/;"	m
]c	../../.config/nvim/init.vim	/^nmap <silent> ]c <Plug>(coc-diagnostic-next)$/;"	m
__start_main	src/anpwrapper.c	/^static int (*__start_main)(int (*main) (int, char * *, char * *), int argc, \\$/;"	v	typeref:typename:int (*)(int (* main)(int,char **,char **),int argc,char ** ubp_av,void (* init)(void),void (* fini)(void),void (* rtld_fini)(void),void (* stack_end))	file:
_close	src/anpwrapper.c	/^static int (*_close)(int sockfd) = NULL;$/;"	v	typeref:typename:int (*)(int sockfd)	file:
_connect	src/anpwrapper.c	/^static int (*_connect)(int sockfd, const struct sockaddr *addr, socklen_t addrlen) = NULL;$/;"	v	typeref:typename:int (*)(int sockfd,const struct sockaddr * addr,socklen_t addrlen)	file:
_function_override_init	src/anpwrapper.c	/^void _function_override_init() {$/;"	f	typeref:typename:void
_init_anp_netstack	src/init.c	/^void __attribute__ ((constructor)) _init_anp_netstack() {$/;"	f	typeref:typename:void
_recv	src/anpwrapper.c	/^static ssize_t (*_recv)(int fd, void *buf, size_t n, int flags) = NULL;$/;"	v	typeref:typename:ssize_t (*)(int fd,void * buf,size_t n,int flags)	file:
_send	src/anpwrapper.c	/^static ssize_t (*_send)(int fd, const void *buf, size_t n, int flags) = NULL;$/;"	v	typeref:typename:ssize_t (*)(int fd,const void * buf,size_t n,int flags)	file:
_socket	src/anpwrapper.c	/^static int (*_socket)(int domain, int type, int protocol) = NULL;$/;"	v	typeref:typename:int (*)(int domain,int type,int protocol)	file:
_tdev	src/tap_netdev.c	/^static struct tap_netdev *_tdev = NULL;$/;"	v	typeref:struct:tap_netdev *	file:
alloc_arp_sub	src/arp.c	/^static struct subuff *alloc_arp_sub()$/;"	f	typeref:struct:subuff *	file:
alloc_sub	src/subuff.c	/^struct subuff *alloc_sub(unsigned int size) {$/;"	f	typeref:struct:subuff *
alloc_sub	src/subuff.c	/^struct subuff *alloc_sub(unsigned int size)$/;"	f	typeref:struct:subuff *
arp_get_hwaddr	src/arp.c	/^unsigned char* arp_get_hwaddr(uint32_t lookup_ip) {$/;"	f	typeref:typename:unsigned char *
arp_get_hwaddr	src/arp.c	/^unsigned char* arp_get_hwaddr(uint32_t lookup_ip)$/;"	f	typeref:typename:unsigned char *
arp_init	src/arp.c	/^void arp_init() {$/;"	f	typeref:typename:void
arp_init	src/arp.c	/^void arp_init()$/;"	f	typeref:typename:void
arp_reply	src/arp.c	/^void arp_reply(struct subuff *sub, struct anp_netdev *netdev) {$/;"	f	typeref:typename:void
arp_reply	src/arp.c	/^void arp_reply(struct subuff *sub, struct anp_netdev *netdev)$/;"	f	typeref:typename:void
arp_request	src/arp.c	/^int arp_request(uint32_t src_ip, uint32_t dst_ip, struct anp_netdev *netdev) {$/;"	f	typeref:typename:int
arp_request	src/arp.c	/^int arp_request(uint32_t src_ip, uint32_t dst_ip, struct anp_netdev *netdev)$/;"	f	typeref:typename:int
arp_rx	src/arp.c	/^void arp_rx(struct subuff *skb) {$/;"	f	typeref:typename:void
arp_rx	src/arp.c	/^void arp_rx(struct subuff *skb)$/;"	f	typeref:typename:void
broadcast_hw	src/arp.c	/^static uint8_t broadcast_hw[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };$/;"	v	typeref:typename:uint8_t[]	file:
cdev_ext	src/anp_netdev.c	/^struct anp_netdev *cdev_ext;$/;"	v	typeref:struct:anp_netdev *
cdev_lo	src/anp_netdev.c	/^struct anp_netdev *cdev_lo;$/;"	v	typeref:struct:anp_netdev *
client_netdev_init	src/anp_netdev.c	/^void client_netdev_init() {$/;"	f	typeref:typename:void
client_netdev_init	src/anp_netdev.c	/^void client_netdev_init()$/;"	f	typeref:typename:void
close	src/anpwrapper.c	/^int close (int sockfd) {$/;"	f	typeref:typename:int
connect	src/anpwrapper.c	/^int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f	typeref:typename:int
create_thread	src/init.c	/^static void create_thread(pthread_t id, void *(*func) (void *)) {$/;"	f	typeref:typename:void	file:
ctrl_c_handler	src/init.c	/^void ctrl_c_handler(int val) {$/;"	f	typeref:typename:void
do_csum	src/utilities.c	/^uint16_t do_csum(void *addr, int count, int start_sum) {$/;"	f	typeref:typename:uint16_t
do_csum	src/utilities.c	/^uint16_t do_csum(void *addr, int count, int start_sum)$/;"	f	typeref:typename:uint16_t
do_tcp_csum	src/utilities.c	/^int do_tcp_csum(uint8_t *data, int length, uint16_t protocol, uint32_t saddr, uint32_t daddr) {$/;"	f	typeref:typename:int
do_tcp_csum	src/utilities.c	/^int do_tcp_csum(uint8_t *data, int length, uint16_t protocol, uint32_t saddr, uint32_t daddr)$/;"	f	typeref:typename:int
dst_neigh_output	src/ip_tx.c	/^int dst_neigh_output(struct subuff *sub) {$/;"	f	typeref:typename:int
dst_neigh_output	src/ip_tx.c	/^int dst_neigh_output(struct subuff *sub)$/;"	f	typeref:typename:int
free_arp_cache	src/arp.c	/^void free_arp_cache() {$/;"	f	typeref:typename:void
free_arp_cache	src/arp.c	/^void free_arp_cache()$/;"	f	typeref:typename:void
free_netdev	src/anp_netdev.c	/^void free_netdev() {$/;"	f	typeref:typename:void
free_netdev	src/anp_netdev.c	/^void free_netdev()$/;"	f	typeref:typename:void
free_routes	src/route.c	/^void free_routes() {$/;"	f	typeref:typename:void
free_routes	src/route.c	/^void free_routes()$/;"	f	typeref:typename:void
free_sub	src/subuff.c	/^void free_sub(struct subuff *sub) {$/;"	f	typeref:typename:void
free_sub	src/subuff.c	/^void free_sub(struct subuff *sub)$/;"	f	typeref:typename:void
g:ale_linters	../../.config/nvim/init.vim	/^let g:ale_linters = {$/;"	v
g:coc_snippet_next	../../.config/nvim/init.vim	/^let g:coc_snippet_next = '<c-j>'$/;"	v
g:coc_snippet_next	../../.config/nvim/init.vim	/^let g:coc_snippet_next = '<tab>'$/;"	v
g:coc_snippet_prev	../../.config/nvim/init.vim	/^let g:coc_snippet_prev = '<c-k>'$/;"	v
g:fzf_action	../../.config/nvim/init.vim	/^let g:fzf_action = {$/;"	v
g:fzf_buffers_jump	../../.config/nvim/init.vim	/^let g:fzf_buffers_jump = 1$/;"	v
g:fzf_layout	../../.config/nvim/init.vim	/^let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.5, 'highlight': 'Comment' } }$/;"	v
g:fzf_layout	../../.config/nvim/init.vim	/^let g:fzf_layout = {'window': { 'width': 0.9, 'height': 0.4 } }$/;"	v
g:fzf_preview_window	../../.config/nvim/init.vim	/^let g:fzf_preview_window = 'right:60%'$/;"	v
g:gist_post_private	../../.config/nvim/init.vim	/^let g:gist_post_private = 1$/;"	v
g:grepper	../../.config/nvim/init.vim	/^let g:grepper.tools=["rg"]$/;"	v
g:grepper	../../.config/nvim/init.vim	/^let g:grepper={}$/;"	v
g:highlightedyank_highlight_duration	../../.config/nvim/init.vim	/^let g:highlightedyank_highlight_duration = 1000$/;"	v
g:lightline	../../.config/nvim/init.vim	/^let g:lightline = {$/;"	v
g:mellow_user_colors	../../.config/nvim/init.vim	/^let g:mellow_user_colors = 1$/;"	v
g:neoformat_basic_format_align	../../.config/nvim/init.vim	/^let g:neoformat_basic_format_align = 1$/;"	v
g:neoformat_basic_format_retab	../../.config/nvim/init.vim	/^let g:neoformat_basic_format_retab = 1$/;"	v
g:neoformat_basic_format_trim	../../.config/nvim/init.vim	/^let g:neoformat_basic_format_trim = 1$/;"	v
g:neoformat_cpp_clangformat	../../.config/nvim/init.vim	/^let g:neoformat_cpp_clangformat = {$/;"	v
g:neoformat_enabled_c	../../.config/nvim/init.vim	/^let g:neoformat_enabled_c = ['clangformat']$/;"	v
g:neoformat_enabled_cpp	../../.config/nvim/init.vim	/^let g:neoformat_enabled_cpp = ['clangformat']$/;"	v
g:neomake_python_enabled_makers	../../.config/nvim/init.vim	/^let g:neomake_python_enabled_makers = ['pylint']$/;"	v
g:rainbow_active	../../.config/nvim/init.vim	/^let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle$/;"	v
g:rustfmt_autosave	../../.config/nvim/init.vim	/^let g:rustfmt_autosave = 1$/;"	v
g:session_autoload	../../.config/nvim/init.vim	/^let g:session_autoload = "no"$/;"	v
g:session_autosave	../../.config/nvim/init.vim	/^let g:session_autosave = "no"$/;"	v
g:session_command_aliases	../../.config/nvim/init.vim	/^let g:session_command_aliases = 1$/;"	v
g:session_directory	../../.config/nvim/init.vim	/^let g:session_directory = "~\/.vim\/session"$/;"	v
g:vimwiki_list	../../.config/nvim/init.vim	/^let g:vimwiki_list = [{'path': '~\/Documents\/vimwiki\/',$/;"	v
ga	../../.config/nvim/init.vim	/^nmap ga <Plug>(EasyAlign)$/;"	m
ga	../../.config/nvim/init.vim	/^xmap ga <Plug>(EasyAlign)$/;"	m
gd	../../.config/nvim/init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
get_mac	src/anp_netdev.c	/^static int get_mac(const char *iface, uint8_t *mac) {$/;"	f	typeref:typename:int	file:
get_mac	src/anp_netdev.c	/^static int get_mac(const char *iface, uint8_t *mac)$/;"	f	typeref:typename:int	file:
get_tdev_name	src/tap_netdev.c	/^char *get_tdev_name() {$/;"	f	typeref:typename:char *
get_tdev_name	src/tap_netdev.c	/^char *get_tdev_name(){$/;"	f	typeref:typename:char *
gi	../../.config/nvim/init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	../../.config/nvim/init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gr	../../.config/nvim/init.vim	/^xmap gr <plug>(GrepperOperator)$/;"	m
gy	../../.config/nvim/init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
icmp_reply	src/icmp.c	/^void icmp_reply(struct subuff *sub) {$/;"	f	typeref:typename:void
icmp_rx	src/icmp.c	/^void icmp_rx(struct subuff *sub) {$/;"	f	typeref:typename:void
ii	../../.config/nvim/init.vim	/^imap ii <Esc>$/;"	m
info_arch	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_dialect_default	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	typeref:typename:const char *
info_platform	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
init_threads	src/init.c	/^static void init_threads() {$/;"	f	typeref:typename:void	file:
ip_output	src/ip_tx.c	/^int ip_output(uint32_t dst_ip_addr, struct subuff *sub) {$/;"	f	typeref:typename:int
ip_output	src/ip_tx.c	/^int ip_output(uint32_t dst_ip_addr, struct subuff *sub)$/;"	f	typeref:typename:int
ip_rx	src/ip_rx.c	/^int ip_rx(struct subuff *sub) {$/;"	f	typeref:typename:int
ip_rx	src/ip_rx.c	/^int ip_rx(struct subuff *sub)$/;"	f	typeref:typename:int
ip_send_check	src/ip_tx.c	/^void ip_send_check(struct iphdr *ihdr) {$/;"	f	typeref:typename:void
ip_send_check	src/ip_tx.c	/^void ip_send_check(struct iphdr *ihdr)$/;"	f	typeref:typename:void
ip_str_to_h32	src/utilities.c	/^uint32_t ip_str_to_h32(const char *addr) {$/;"	f	typeref:typename:uint32_t
ip_str_to_h32	src/utilities.c	/^uint32_t ip_str_to_h32(const char *addr)$/;"	f	typeref:typename:uint32_t
ip_str_to_n32	src/utilities.c	/^uint32_t ip_str_to_n32(const char *addr) {$/;"	f	typeref:typename:uint32_t
ip_str_to_n32	src/utilities.c	/^uint32_t ip_str_to_n32(const char *addr){$/;"	f	typeref:typename:uint32_t
is_socket_supported	src/anpwrapper.c	/^static int is_socket_supported(int domain, int type, int protocol) {$/;"	f	typeref:typename:int	file:
line_return	../../.config/nvim/init.vim	/^augroup line_return$/;"	a
lock	src/timer.c	/^static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
main	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	typeref:typename:void
main	arpdummy.c	/^int main(int argv, char **argc){$/;"	f	typeref:typename:int
mapleader	../../.config/nvim/init.vim	/^let mapleader=","$/;"	v
mygroup	../../.config/nvim/init.vim	/^augroup mygroup$/;"	a
netdev_alloc	src/anp_netdev.c	/^static struct anp_netdev *netdev_alloc(char *addr, char *hwaddr, uint32_t mtu) {$/;"	f	typeref:struct:anp_netdev *	file:
netdev_alloc	src/anp_netdev.c	/^static struct anp_netdev *netdev_alloc(char *addr, char *hwaddr, uint32_t mtu)$/;"	f	typeref:struct:anp_netdev *	file:
netdev_get	src/anp_netdev.c	/^struct anp_netdev* netdev_get(uint32_t sip) {$/;"	f	typeref:struct:anp_netdev *
netdev_get	src/anp_netdev.c	/^struct anp_netdev* netdev_get(uint32_t sip)$/;"	f	typeref:struct:anp_netdev *
netdev_rx_loop	src/anp_netdev.c	/^void *netdev_rx_loop() {$/;"	f	typeref:typename:void *
netdev_rx_loop	src/anp_netdev.c	/^void *netdev_rx_loop()$/;"	f	typeref:typename:void *
netdev_transmit	src/anp_netdev.c	/^int netdev_transmit(struct subuff *sub, uint8_t *dst_hw, uint16_t ethertype) {$/;"	f	typeref:typename:int
netdev_transmit	src/anp_netdev.c	/^int netdev_transmit(struct subuff *sub, uint8_t *dst_hw, uint16_t ethertype)$/;"	f	typeref:typename:int
print_trace	src/utilities.c	/^void print_trace(void) {$/;"	f	typeref:typename:void
process_arp_entry	src/arp.c	/^static int process_arp_entry(struct arp_hdr *hdr, struct arp_ipv4 *data) {$/;"	f	typeref:typename:int	file:
process_arp_entry	src/arp.c	/^static int process_arp_entry(struct arp_hdr *hdr, struct arp_ipv4 *data){$/;"	f	typeref:typename:int	file:
process_packet	src/anp_netdev.c	/^static int process_packet(struct subuff *sub) {$/;"	f	typeref:typename:int	file:
process_packet	src/anp_netdev.c	/^static int process_packet(struct subuff *sub)$/;"	f	typeref:typename:int	file:
qnxnto	CMakeFiles/3.18.1/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
recv	src/anpwrapper.c	/^ssize_t recv (int sockfd, void *buf, size_t len, int flags) {$/;"	f	typeref:typename:ssize_t
route_add	src/route.c	/^void route_add(uint32_t dst, uint32_t gateway, uint32_t netmask, uint8_t flags,$/;"	f	typeref:typename:void
route_alloc	src/route.c	/^static struct rtentry *route_alloc(uint32_t dst, uint32_t gateway, uint32_t netmask,$/;"	f	typeref:struct:rtentry *	file:
route_init	src/route.c	/^void route_init() {$/;"	f	typeref:typename:void
route_init	src/route.c	/^void route_init()$/;"	f	typeref:typename:void
route_lookup	src/route.c	/^struct rtentry *route_lookup(uint32_t daddr) {$/;"	f	typeref:struct:rtentry *
route_lookup	src/route.c	/^struct rtentry *route_lookup(uint32_t daddr)$/;"	f	typeref:struct:rtentry *
run_bash_command	src/utilities.c	/^int run_bash_command(char *cmd, ...) {$/;"	f	typeref:typename:int
run_bash_command	src/utilities.c	/^int run_bash_command(char *cmd, ...){$/;"	f	typeref:typename:int
rwlock	src/timer.c	/^static pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	typeref:typename:pthread_rwlock_t	file:
s:build_quickfix_list	../../.config/nvim/init.vim	/^function! s:build_quickfix_list(lines)$/;"	f
s:check_back_space	../../.config/nvim/init.vim	/^function! s:check_back_space() abort$/;"	f
s:show_documentation	../../.config/nvim/init.vim	/^function! s:show_documentation()$/;"	f
send	src/anpwrapper.c	/^ssize_t send(int sockfd, const void *buf, size_t len, int flags) {$/;"	f	typeref:typename:ssize_t
socket	src/anpwrapper.c	/^int socket(int domain, int type, int protocol) {$/;"	f	typeref:typename:int
stop	src/anp_netdev.c	/^volatile bool stop;$/;"	v	typeref:typename:volatile bool
stop	src/init.c	/^volatile bool stop = false;$/;"	v	typeref:typename:volatile bool
sub_head	src/subuff.c	/^uint8_t *sub_head(struct subuff *sub) {$/;"	f	typeref:typename:uint8_t *
sub_head	src/subuff.c	/^uint8_t *sub_head(struct subuff *sub)$/;"	f	typeref:typename:uint8_t *
sub_push	src/subuff.c	/^uint8_t *sub_push(struct subuff *sub, unsigned int len) {$/;"	f	typeref:typename:uint8_t *
sub_push	src/subuff.c	/^uint8_t *sub_push(struct subuff *sub, unsigned int len)$/;"	f	typeref:typename:uint8_t *
sub_reserve	src/subuff.c	/^void *sub_reserve(struct subuff *sub, unsigned int len) {$/;"	f	typeref:typename:void *
sub_reserve	src/subuff.c	/^void *sub_reserve(struct subuff *sub, unsigned int len)$/;"	f	typeref:typename:void *
sub_reset_header	src/subuff.c	/^void sub_reset_header(struct subuff *sub) {$/;"	f	typeref:typename:void
sub_reset_header	src/subuff.c	/^void sub_reset_header(struct subuff *sub)$/;"	f	typeref:typename:void
sum_every_16bits	src/utilities.c	/^static uint32_t sum_every_16bits(void *addr, int count) {$/;"	f	typeref:typename:uint32_t	file:
sum_every_16bits	src/utilities.c	/^static uint32_t sum_every_16bits(void *addr, int count)$/;"	f	typeref:typename:uint32_t	file:
tdev_alloc	src/tap_netdev.c	/^static int tdev_alloc(struct tap_netdev *dev) {$/;"	f	typeref:typename:int	file:
tdev_alloc	src/tap_netdev.c	/^static int tdev_alloc(struct tap_netdev *dev)$/;"	f	typeref:typename:int	file:
tdev_init	src/tap_netdev.c	/^void tdev_init(void) {$/;"	f	typeref:typename:void
tdev_init	src/tap_netdev.c	/^void tdev_init(void)$/;"	f	typeref:typename:void
tdev_read	src/tap_netdev.c	/^int tdev_read(char *buf, int len) {$/;"	f	typeref:typename:int
tdev_read	src/tap_netdev.c	/^int tdev_read(char *buf, int len)$/;"	f	typeref:typename:int
tdev_write	src/tap_netdev.c	/^int tdev_write(char *buf, int len) {$/;"	f	typeref:typename:int
tdev_write	src/tap_netdev.c	/^int tdev_write(char *buf, int len)$/;"	f	typeref:typename:int
threads	src/init.c	/^static pthread_t threads[THREAD_MAX];$/;"	v	typeref:typename:pthread_t[]	file:
tick	src/timer.c	/^static int tick = 0;$/;"	v	typeref:typename:int	file:
timer_add	src/timer.c	/^struct timer *timer_add(uint32_t expire, void *(*handler)(void *), void *arg) {$/;"	f	typeref:struct:timer *
timer_add	src/timer.c	/^struct timer *timer_add(uint32_t expire, void *(*handler)(void *), void *arg)$/;"	f	typeref:struct:timer *
timer_alloc	src/timer.c	/^static struct timer *timer_alloc() {$/;"	f	typeref:struct:timer *	file:
timer_alloc	src/timer.c	/^static struct timer *timer_alloc()$/;"	f	typeref:struct:timer *	file:
timer_cancel	src/timer.c	/^void timer_cancel(struct timer *t) {$/;"	f	typeref:typename:void
timer_cancel	src/timer.c	/^void timer_cancel(struct timer *t)$/;"	f	typeref:typename:void
timer_debug	src/timer.c	/^static void timer_debug() {$/;"	f	typeref:typename:void	file:
timer_debug	src/timer.c	/^static void timer_debug()$/;"	f	typeref:typename:void	file:
timer_free	src/timer.c	/^static void timer_free(struct timer *t) {$/;"	f	typeref:typename:void	file:
timer_free	src/timer.c	/^static void timer_free(struct timer *t)$/;"	f	typeref:typename:void	file:
timer_get_tick	src/timer.c	/^int timer_get_tick() {$/;"	f	typeref:typename:int
timer_get_tick	src/timer.c	/^int timer_get_tick()$/;"	f	typeref:typename:int
timer_oneshot	src/timer.c	/^void timer_oneshot(uint32_t expire, void *(*handler)(void *), void *arg) {$/;"	f	typeref:typename:void
timer_oneshot	src/timer.c	/^void timer_oneshot(uint32_t expire, void *(*handler)(void *), void *arg)$/;"	f	typeref:typename:void
timer_release	src/timer.c	/^void timer_release(struct timer *t) {$/;"	f	typeref:typename:void
timer_release	src/timer.c	/^void timer_release(struct timer *t)$/;"	f	typeref:typename:void
timers_start	src/timer.c	/^void *timers_start() {$/;"	f	typeref:typename:void *
timers_start	src/timer.c	/^void *timers_start()$/;"	f	typeref:typename:void *
timers_tick	src/timer.c	/^static void timers_tick() {$/;"	f	typeref:typename:void	file:
timers_tick	src/timer.c	/^static void timers_tick()$/;"	f	typeref:typename:void	file:
u32_ip_to_str	src/utilities.c	/^void u32_ip_to_str(char * str, uint32_t daddr){$/;"	f	typeref:typename:void
zz	../../.config/nvim/init.vim	/^imap zz <Esc>:wq<CR>$/;"	m
